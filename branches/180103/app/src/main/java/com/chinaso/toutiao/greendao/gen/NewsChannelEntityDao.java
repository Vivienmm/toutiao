package com.chinaso.toutiao.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chinaso.toutiao.mvp.data.NewsChannelEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_CHANNEL_ENTITY".
*/
public class NewsChannelEntityDao extends AbstractDao<NewsChannelEntity, String> {

    public static final String TABLENAME = "NEWS_CHANNEL_ENTITY";

    /**
     * Properties of entity NewsChannelEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property OrderId = new Property(2, int.class, "orderId", false, "ORDER_ID");
        public final static Property Selected = new Property(3, Boolean.class, "selected", false, "SELECTED");
        public final static Property Lock = new Property(4, Boolean.class, "lock", false, "LOCK");
        public final static Property Added = new Property(5, Boolean.class, "added", false, "ADDED");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
    };


    public NewsChannelEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NewsChannelEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_CHANNEL_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ORDER_ID\" INTEGER NOT NULL ," + // 2: orderId
                "\"SELECTED\" INTEGER," + // 3: selected
                "\"LOCK\" INTEGER," + // 4: lock
                "\"ADDED\" INTEGER," + // 5: added
                "\"TYPE\" TEXT);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_CHANNEL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsChannelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getOrderId());
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(4, selected ? 1L: 0L);
        }
 
        Boolean lock = entity.getLock();
        if (lock != null) {
            stmt.bindLong(5, lock ? 1L: 0L);
        }
 
        Boolean added = entity.getAdded();
        if (added != null) {
            stmt.bindLong(6, added ? 1L: 0L);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsChannelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getOrderId());
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(4, selected ? 1L: 0L);
        }
 
        Boolean lock = entity.getLock();
        if (lock != null) {
            stmt.bindLong(5, lock ? 1L: 0L);
        }
 
        Boolean added = entity.getAdded();
        if (added != null) {
            stmt.bindLong(6, added ? 1L: 0L);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NewsChannelEntity readEntity(Cursor cursor, int offset) {
        NewsChannelEntity entity = new NewsChannelEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // selected
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // lock
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // added
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsChannelEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderId(cursor.getInt(offset + 2));
        entity.setSelected(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setLock(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setAdded(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewsChannelEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(NewsChannelEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
